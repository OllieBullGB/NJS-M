[General]
network = Scenario
sim-time-limit = 120s
debug-on-errors = true
cmdenv-express-mode = true
image-path = ../../../../images

# RSU Applications (as in NJS_ap)
*.RSU.numApps = 5
*.RSU.app[0].typename = "NJSPingApp"
*.RSU.app[0].destAddr = "*"
*.RSU.app[0].sendInterval = 20ms
*.RSU.app[1].typename = "NJSLoggingApp"
*.RSU.app[1].cleanAfterEachCalculation = false
*.RSU.app[2].typename = "NJSLegacyLoggingApp"
*.RSU.app[2].cleanAfterEachCalculation = false
*.RSU.app[3].typename = "SNRLoggingApp"
*.RSU.app[3].cleanAfterEachCalculation = false
*.RSU.app[4].typename = "MLLoggingApp"
*.RSU.app[4].cleanAfterEachCalculation = false

#------------------------------------------------------------------
# Jammer Configuration (from NJS_ap)
#------------------------------------------------------------------
*.jammer.mobility.typename = "StationaryMobility"
*.jammer.numApps = 1
*.jammer.app[0].typename = "NJSJammerApp"
*.jammer.app[0].destAddr = ""
*.jammer.app[0].sendInterval = 5ms
*.jammer.app[0].packetSize = 8B
*.jammer.app[0].jammingSourceAddress = "jammer"
*.jammer.app[0].isProactive = true
*.jammer.app[0].jammingRadius = 215m
*.jammer.wlan[*].radio.displayCommunicationRange = true
*.jammer.wlan[*].radio.transmitter.power = 1.6mW


*.node[*].numApps = 2  # Each host and RSU has two applications (NJS + SNR)

# Ping application for hosts
*.node[*].app[0].typename = "NJSPingApp"  # Ping application for all hosts
*.node[*].app[0].destAddr = "RSU"         # Hosts ping the RSU
*.node[*].app[0].sendInterval = 80ms      # Time interval between sending packets
*.node[*].app[0].packetSize = 1518B       # Packet size

*.node[*].app[1].typename = "SNRPingApp"  # Ping application for all hosts
*.node[*].app[1].destAddr = "RSU"         # Hosts ping the RSU
*.node[*].app[1].sendInterval = 80ms      # Time interval between sending packets
*.node[*].app[1].packetSize = 1518B       # Packet size

# Ieee80211Interface
*.RSU.wlan[*].radio.transmitter.power = 15mW       # Transmit power for RSU
*.node[*].wlan[*].radio.transmitter.power = 15mW   # Transmit power for hosts
**.wlan[*].radio.transmitter.bitrate = 2Mbps      # Transmit bitrate for all devices
**.wlan[*].radio.transmitter.headerLength = 272B  # Transmitter header length
**.wlan[*].radio.transmitter.centerFrequency = 2.4GHz  # Center frequency (2.4 GHz)
**.wlan[*].radio.receiver.sensitivity = -85dBm    # Receiver sensitivity
**.wlan[*].radio.receiver.snirThreshold = 4dB     # Signal-to-noise-and-interference threshold

# HostAutoConfigurator
#*.node[*].ipv4.configurator.typename = "HostAutoConfigurator"
#*.node[*].ipv4.configurator.interfaces = "wlan0"
#*.node[*].ipv4.configurator.mcastGroups = "224.0.0.1"

# VeinsInetMobility
*.node[*].mobility.typename = "VeinsInetMobility"


# Simulation playground dimensions (from Veins)
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 5500m
**.constraintAreaMaxY = 5500m
**.constraintAreaMaxZ = 50m

# TraCI and obstacle configuration (for Veins vehicle mobility)
*.manager.updateInterval = 1s
*.manager.host = "localhost"
*.manager.port = 9999
*.manager.numVehicles = 1
*.manager.autoShutdown = true
*.manager.launchConfig = xmldoc("durham.launchd.xml")
*.obstacles.obstacles = xmldoc("config.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")
*.manager.moduleType = "inetwirelesstutorial.veins_inet.VeinsInetCar"

# Misc
**.vector-recording = true

[Config plain]

[Config canvas]
extends = plain
description = "Enable enhanced 2D visualization"

# IntegratedCanvasVisualizer (2D)
*.visualizer.*.obstacleLossVisualizer.displayIntersections = true
*.visualizer.*.obstacleLossVisualizer.displayFaceNormalVectors = true
*.visualizer.*.obstacleLossVisualizer.intersectionLineColor = "yellow"
*.visualizer.*.mediumVisualizer.signalPropagationAnimationSpeed = 500/3e8
*.visualizer.*.mediumVisualizer.signalTransmissionAnimationSpeed = 50000/3e8
*.visualizer.*.mediumVisualizer.displaySignals = true
*.visualizer.canvasVisualizer.mediumVisualizer.displaySignalDepartures = false
*.visualizer.canvasVisualizer.mediumVisualizer.displaySignalArrivals = false
*.visualizer.*.physicalLinkVisualizer.displayLinks = true
#*.visualizer.*.mobilityVisualizer.displayPositions = true
#*.visualizer.*.mobilityVisualizer.displayOrientations = true
#*.visualizer.*.mobilityVisualizer.displayVelocities = true
#*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
#*.visualizer.*.mobilityVisualizer.moduleFilter = "**.antenna.mobility"

*.visualizer.osgVisualizer.typename = ""

[Config osg]
extends = canvas
description = "Enable enhanced 2D and 3D visualization using OSG"

*.useOsg = true

# IntegratedOsgVisualizer (3D)
*.visualizer.osgVisualizer.typename = IntegratedOsgVisualizer
*.node[*].osgModel = "veins_inet/node/car.obj.-5e-1,0e-1,5e-1.trans.450e-2,180e-2,150e-2.scale" # offset .5 back and .5 up (position is front bumper at road level), make 450cm long, 180m wide, 150m high

